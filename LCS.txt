public class Main {
    public static void main(String[] args) {
        LCS lcs=new LCS();
        lcs.DP(1,1);
        System.out.println(lcs.getC());
        System.out.println(lcs.Sequence(7, 6));
    }
}

class LCS{
    private final String X="0ABCBDAB";//max_index=7
    private final String Y="0BDCABA";//max_index=6
    private final int m = X.length();//8
    private final int n = Y.length();//7
    private int[][] C =new int[m][n];//8,7, max_index=7,6
    private int[][] B =new int[m][n];
    public void DP(int m , int n){
        if(m==this.m-1&&n==this.n)//m==7 , n==7
            return ;
        else if(n==this.n)//n==7
            DP(m+1, n=1);
        else{
            if(X.charAt(m)==Y.charAt(n)){
                C[m][n]=C[m-1][n-1]+1;
                B[m][n]=0;
            }
            else {
                if(C[m-1][n]>=C[m][n-1]){
                    C[m][n]=C[m-1][n];
                    B[m][n]=1;
                }
                else{
                    C[m][n]=C[m][n-1];
                    B[m][n]=-1;
                }
            }
            DP(m,n+1);
        }
    }

    public int getC() {
        return C[m-1][n-1];
    }
    public String Sequence(int m, int n) {
        if(m==2&&n==1)
            return "最长子序列为："+X.charAt(m);
        else{
            if (B[m][n] == 1)
                return Sequence(m - 1, n);
            else if (B[m][n] == 0)
                return Sequence(m - 1, n - 1) + X.charAt(m);
            else if (B[m][n] == -1)
                return Sequence(m, n - 1);
        }
        return "";
    }
}